'use strict';

var gutil = require('gulp-util'),
    through = require('through2'),
    merge = require('lodash.merge'),
    lbInclude = require('lb-include');

function shouldProcess(contents)
{
    return typeof(contents) === 'string'
        && contents.indexOf('#include') >= 0
        && /<!--\s*#include\s+file=[^]+-->/im.test(contents);
}

module.exports = function (options)
{
    options = options || {};

    return through.obj(function (file, enc, cb)
    {
        var stream = this;
        if (file.isNull())
        {
            stream.push(file);
            cb();
            return;
        }

        if (file.isStream())
        {
            stream.emit('error', new gutil.PluginError('gulp-lb-include', 'Streams are not supported'));
            cb();
            return;
        }

        try
        {
            var lbOptions = merge({}, options); //make a copy
            //if root dir is specified in options, that overrides the base dir from Gulp
            //if neither is specified for some reason, then we will use process.cwd() instead
            lbOptions.root = lbOptions.root || lbOptions.rootDir || file.base || process.cwd();
            //previous versions of `gulp-lb-include` accepted a 'rootDir' option which was passed
            //to `lb-include` as the `root` option. Now that all options can be passed directly through
            //to `lb-include`, we just want the option to be called `root`.  But to ensure that we
            //don't break backwards compatibility we'll use it if it's passed in.  If `root` is specified,
            //it takes priority over `rootDir`
            delete lbOptions.rootDir;
            //perform the transform
            lbOptions.fileContents = file.contents.toString();
            //does it look like it needs to be processed?
            if (shouldProcess(lbOptions.fileContents))
            {
                lbInclude(file.path, lbOptions).then(function (markup)
                {
                    file.contents = new Buffer(markup);
                    stream.push(file);
                    cb();
                }).catch(function (err)
                {
                    err = new gutil.PluginError('gulp-lb-include', err);
                    stream.emit('error', err);
                });
            }
            else
            {
                stream.push(file);
                cb();
            }
        }
        catch (err)
        {
            stream.emit('error', new gutil.PluginError('gulp-lb-include', err));
            cb();
        }
    });
};
